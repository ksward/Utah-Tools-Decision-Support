validator.assertFalse=\u9a8c\u8bc1\u5931\u8d25
validator.assertTrue=\u9a8c\u8bc1\u5931\u8d25
validator.future=\u5fc5\u987b\u8fdf\u4e8e\u4eca\u65e5
validator.length=\u957f\u5ea6\u5fc5\u987b\u4ecb\u4e8e {min} \u4e0e {max} \u4e4b\u95f4
validator.max=\u5fc5\u987b\u5c0f\u4e8e\u7b49\u4e8e {value}
validator.min=\u5fc5\u987b\u5927\u4e8e\u7b49\u4e8e {value}
validator.notNull=\u4e0d\u80fd\u4e3a\u7a7a
validator.past=\u5fc5\u987b\u65e9\u4e8e\u4eca\u65e5
validator.pattern=\u5fc5\u987b\u7b26\u5408 "{regex}"
validator.range=\u5fc5\u987b\u4ecb\u4e8e {min} \u4e0e {max} \u4e4b\u95f4
validator.size=\u5927\u5c0f\u5fc5\u987b\u4ecb\u4e8e {min} \u4e0e {max} \u4e4b\u95f4
validator.email=not a well-formed email address
validator.notEmpty=may not be null or empty
validator.digits=numeric value out of bounds (<{integerDigits} digits>.<{fractionalDigits} digits> expected)
validator.ean=invalid EAN
validator.creditCard=invalid credit card number